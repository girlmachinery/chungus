void pm_weapon_stub(game::pmove_t* pm, void* pml)
{
	if (pm->ps->weapon.data == pm->cmd.weapon.data && (unsigned int)(pm->ps->weapState[0].weaponState - 3) <= 2
		&& game::PM_Weapon_InValidChangeWeaponState(pm) && !((pm->ps->pm_flags >> 3) & 1)) //game code to check for yys
	{
		for (int hand = 0; hand < 2; hand++)
		{
			//for glides
			if (pm->ps->weapState[hand].weapAnim == 30 || pm->ps->weapState[hand].weapAnim == 2078)
				pm->ps->weapState[hand].weapAnim = 31;
			else
				pm->ps->weapState[hand].weapAnim = 1;
 
 
			pm->ps->weapState[hand].weaponState = 0;
			pm->ps->weapState[hand].weaponDelay = 0;
			pm->ps->weapState[hand].weaponTime = 0;
			pm->ps->weapState[hand].weaponRestrictKickTime = 0;
			game::BG_ClearDropWeaponAnim(pm->ps);//dont know if its needed but the game does it normally so idk
		}
	}
 
	int weaponanimbackup[2] = { pm->ps->weapState[0].weapAnim, pm->ps->weapState[1].weapAnim };
 
	pm_weapon_hook->invoke(pm, pml);
 
	for (int hand = 0; hand < 2; hand++)
	{
		if ((pm->ps->weapState[hand].weaponState == 3 || pm->ps->weapState[hand].weaponState == 4)
			&& pm->ps->sprintState.lastSprintStart > pm->ps->sprintState.lastSprintEnd)//if weaponstate is droppting weapon and is sprinting
		{
			pm->ps->weapState[hand].weapAnim = weaponanimbackup[hand];
		}
	}
}
